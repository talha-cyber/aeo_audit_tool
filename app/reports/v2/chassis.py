"""
Report document chassis for professional PDF structure.

This module provides the foundation for v2 reports with:
- BaseDocTemplate with custom page templates
- Professional headers and footers with page numbers
- Table of Contents with navigation
- Document metadata and PDF properties
- Multi-page layout system
"""

from __future__ import annotations

from typing import Any, List

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.platypus import BaseDocTemplate, Frame, PageTemplate

try:
    from reportlab.platypus.tableofcontents import TableOfContents
except ImportError:
    # Fallback for different ReportLab versions
    try:
        from reportlab.platypus import TableOfContents
    except ImportError:
        # Create a minimal TableOfContents if not available
        class TableOfContents:
            def __init__(self):
                self.levelStyles = []


from reportlab.pdfgen import canvas

# Page margins and layout
MARGIN = 0.75 * inch
HEADER_HEIGHT = 0.5 * inch
FOOTER_HEIGHT = 0.5 * inch


class ReportDoc(BaseDocTemplate):
    """
    Professional document template for AEO audit reports.

    Features:
    - Custom headers and footers with branding
    - Page numbering
    - Table of contents support
    - Document metadata
    - Multiple page templates for different sections
    """

    def __init__(self, filename: str, **kwargs):
        """
        Initialize the report document.

        Args:
            filename: Path where PDF will be saved
            **kwargs: Additional BaseDocTemplate arguments
        """
        super().__init__(filename, pagesize=A4, **kwargs)

        # Document properties
        self.header_left = "AEO Competitive Intelligence Report"
        self.header_right = "Confidential"
        self.client_name = ""
        self.date_range = ""

        # Create page templates
        self._create_page_templates()

        # Initialize table of contents
        self.toc = TableOfContents()
        self.toc.levelStyles = []  # Will use default styles unless overridden

    def _create_page_templates(self):
        """Create different page templates for various report sections."""

        # Main content frame
        main_frame = Frame(
            MARGIN,
            MARGIN,
            A4[0] - 2 * MARGIN,
            A4[1] - 2 * MARGIN - HEADER_HEIGHT - FOOTER_HEIGHT,
            id="main_frame",
            leftPadding=0,
            rightPadding=0,
            topPadding=0,
            bottomPadding=0,
        )

        # Standard page template with header/footer
        standard_template = PageTemplate(
            id="standard",
            frames=[main_frame],
            onPage=self._draw_standard_page,
            pagesize=A4,
        )

        # Title page template (no header/footer)
        title_frame = Frame(
            MARGIN, MARGIN, A4[0] - 2 * MARGIN, A4[1] - 2 * MARGIN, id="title_frame"
        )

        title_template = PageTemplate(
            id="title", frames=[title_frame], onPage=self._draw_title_page, pagesize=A4
        )

        # Add templates to document
        self.addPageTemplates([title_template, standard_template])

    def _draw_standard_page(self, canvas_obj: canvas.Canvas, doc: BaseDocTemplate):
        """
        Draw standard page with header and footer.

        Args:
            canvas_obj: ReportLab canvas object
            doc: Document object
        """
        # Header
        self._draw_header(canvas_obj, doc)

        # Footer
        self._draw_footer(canvas_obj, doc)

    def _draw_title_page(self, canvas_obj: canvas.Canvas, doc: BaseDocTemplate):
        """
        Draw title page (minimal formatting).

        Args:
            canvas_obj: ReportLab canvas object
            doc: Document object
        """
        # Only add subtle footer for title page
        canvas_obj.setFont("Helvetica", 8)
        canvas_obj.setFillColor(colors.grey)
        canvas_obj.drawRightString(
            A4[0] - MARGIN, MARGIN - 10, "Generated by AEO Audit Platform"
        )

    def _draw_header(self, canvas_obj: canvas.Canvas, doc: BaseDocTemplate):
        """
        Draw professional header with branding and context.

        Args:
            canvas_obj: ReportLab canvas object
            doc: Document object
        """
        # Header line
        canvas_obj.setStrokeColor(colors.HexColor("#2C3E50"))
        canvas_obj.setLineWidth(1)
        canvas_obj.line(MARGIN, A4[1] - MARGIN + 6, A4[0] - MARGIN, A4[1] - MARGIN + 6)

        # Header text
        canvas_obj.setFont("Helvetica-Bold", 10)
        canvas_obj.setFillColor(colors.HexColor("#2C3E50"))
        canvas_obj.drawString(MARGIN, A4[1] - MARGIN + 12, self.header_left)

        # Right header text (confidentiality or date range)
        canvas_obj.setFont("Helvetica", 9)
        canvas_obj.setFillColor(colors.grey)
        header_right_text = self.date_range if self.date_range else self.header_right
        canvas_obj.drawRightString(
            A4[0] - MARGIN, A4[1] - MARGIN + 12, header_right_text
        )

    def _draw_footer(self, canvas_obj: canvas.Canvas, doc: BaseDocTemplate):
        """
        Draw professional footer with page numbers.

        Args:
            canvas_obj: ReportLab canvas object
            doc: Document object
        """
        # Footer line
        canvas_obj.setStrokeColor(colors.lightgrey)
        canvas_obj.setLineWidth(0.5)
        canvas_obj.line(MARGIN, MARGIN - 6, A4[0] - MARGIN, MARGIN - 6)

        # Page number
        canvas_obj.setFont("Helvetica", 9)
        canvas_obj.setFillColor(colors.grey)
        canvas_obj.drawRightString(A4[0] - MARGIN, MARGIN - 20, f"Page {doc.page}")

        # Company branding
        canvas_obj.drawString(MARGIN, MARGIN - 20, "AEO Audit Platform - Confidential")

    def set_metadata(self, title: str, author: str, subject: str, keywords: List[str]):
        """
        Set PDF metadata properties.

        Args:
            title: Document title
            author: Document author
            subject: Document subject
            keywords: List of keywords for document
        """
        self.title = title
        self.author = author
        self.subject = subject
        self.keywords = keywords

    def set_header_context(self, client_name: str = "", date_range: str = ""):
        """
        Set context-specific header information.

        Args:
            client_name: Client name for header
            date_range: Date range for header
        """
        if client_name:
            self.header_left = f"{client_name} â€” AEO Audit"
            self.client_name = client_name

        if date_range:
            self.date_range = f"Period: {date_range}"

    def beforeDocument(self):
        """Set PDF metadata before building document."""
        # Only set metadata if canvas is available
        if hasattr(self, "canv") and self.canv:
            if hasattr(self, "title"):
                self.canv.setTitle(self.title)
            if hasattr(self, "author"):
                self.canv.setAuthor(self.author)
            if hasattr(self, "subject"):
                self.canv.setSubject(self.subject)
            if hasattr(self, "keywords") and self.keywords:
                if isinstance(self.keywords, list):
                    self.canv.setKeywords(", ".join(self.keywords))
                else:
                    self.canv.setKeywords(str(self.keywords))

            # Additional PDF properties
            self.canv.setCreator("AEO Audit Platform")
            self.canv.setProducer("AEO Report Generator v2.0")

    def afterFlowable(self, flowable):
        """
        Handle post-flowable processing for ToC and bookmarks.

        Args:
            flowable: The flowable that was just processed
        """
        # Handle table of contents entries
        if hasattr(flowable, "getPlainText"):
            text = flowable.getPlainText()

            # Check if this is a heading (basic heuristic)
            if (
                hasattr(flowable, "style")
                and flowable.style
                and hasattr(flowable.style, "name")
                and "heading" in flowable.style.name.lower()
            ):
                # Determine heading level from style
                level = 0
                if (
                    "heading1" in flowable.style.name.lower()
                    or "h1" in flowable.style.name.lower()
                ):
                    level = 0
                elif (
                    "heading2" in flowable.style.name.lower()
                    or "h2" in flowable.style.name.lower()
                ):
                    level = 1
                elif (
                    "heading3" in flowable.style.name.lower()
                    or "h3" in flowable.style.name.lower()
                ):
                    level = 2

                # Add to table of contents
                self.notify("TOCEntry", (level, text, self.page))

                # Add bookmark
                key = text.replace(" ", "_").replace("/", "_")
                self.canv.bookmarkPage(key)
                self.canv.addOutlineEntry(text, key, level=level)

        # Handle postponed outline entries (from accessibility helpers)
        if hasattr(flowable, "_postponed_bookmark") and callable(
            flowable._postponed_bookmark
        ):
            flowable._postponed_bookmark(self.canv, self)


def create_toc_with_styles() -> TableOfContents:
    """
    Create a formatted table of contents with professional styling.

    Returns:
        Configured TableOfContents object
    """
    from reportlab.lib.styles import ParagraphStyle

    toc = TableOfContents()

    # Level 0 (main headings)
    toc.levelStyles = [
        ParagraphStyle(
            name="TOCHeading1",
            fontSize=12,
            leading=16,
            leftIndent=0,
            spaceBefore=6,
            spaceAfter=6,
            textColor=colors.HexColor("#2C3E50"),
            fontName="Helvetica-Bold",
        ),
        # Level 1 (sub-headings)
        ParagraphStyle(
            name="TOCHeading2",
            fontSize=11,
            leading=14,
            leftIndent=20,
            spaceBefore=3,
            spaceAfter=3,
            textColor=colors.HexColor("#34495E"),
            fontName="Helvetica",
        ),
        # Level 2 (sub-sub-headings)
        ParagraphStyle(
            name="TOCHeading3",
            fontSize=10,
            leading=12,
            leftIndent=40,
            spaceBefore=2,
            spaceAfter=2,
            textColor=colors.grey,
            fontName="Helvetica",
        ),
    ]

    return toc


class ReportBuilder:
    """
    Helper class to build reports with proper page template switching.
    """

    def __init__(self, doc: ReportDoc):
        """
        Initialize builder with document.

        Args:
            doc: ReportDoc instance
        """
        self.doc = doc
        self.story: List[Any] = []

    def add_title_page(self, content: List[Any]):
        """
        Add title page content (uses title template).

        Args:
            content: List of flowables for title page
        """
        from reportlab.platypus import NextPageTemplate, PageBreak

        # Switch to title template
        self.story.append(NextPageTemplate("title"))
        self.story.extend(content)
        self.story.append(PageBreak())

        # Switch back to standard template
        self.story.append(NextPageTemplate("standard"))

    def add_standard_content(self, content: List[Any]):
        """
        Add standard content (uses standard template with headers/footers).

        Args:
            content: List of flowables for standard pages
        """
        self.story.extend(content)

    def add_page_break(self):
        """Add a page break."""
        from reportlab.platypus import PageBreak

        self.story.append(PageBreak())

    def add_spacer(self, height: float = 20):
        """
        Add vertical spacing.

        Args:
            height: Height in points
        """
        from reportlab.platypus import Spacer

        self.story.append(Spacer(1, height))

    def build(self) -> str:
        """
        Build the final PDF document.

        Returns:
            Path to the generated PDF file
        """
        self.doc.build(self.story)
        return self.doc.filename
