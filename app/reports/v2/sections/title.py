"""
Title page section builder for AEO audit reports.

This module creates the cover page with:
- Report title and client branding
- Metadata table with audit information
- Professional styling and layout
"""

from __future__ import annotations

from pathlib import Path
from typing import Any, Dict, List

from reportlab.lib.units import inch
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Image, Paragraph, Spacer, Table

from app.utils.logger import get_logger

from ..theme import (
    Theme,
    clean_html_content,
    create_paragraph_styles,
    create_table_styles,
    format_date,
)

logger = get_logger(__name__)


def build(theme: Theme, data: Dict[str, Any]) -> List[Any]:
    """
    Build title page section.

    Args:
        theme: Theme configuration for styling
        data: Audit data dictionary

    Returns:
        List of ReportLab flowables for title page
    """
    story = []
    styles = create_paragraph_styles(theme)
    table_styles = create_table_styles(theme)

    # Main title
    client_name = data.get("client_name", "Unknown Client")
    title_text = f"AEO Competitive Intelligence Report<br/><br/>{client_name}"
    title_paragraph = Paragraph(clean_html_content(title_text), styles["title"])
    story.append(title_paragraph)

    # Spacer after title
    story.append(Spacer(1, 0.5 * inch))

    # Report metadata table
    metadata = build_metadata_table(theme, data)
    story.append(metadata)

    # Additional spacing
    story.append(Spacer(1, 0.3 * inch))

    # Optional logo space (if logo_path is provided in theme)
    if theme.logo_path:
        logo_path = Path(theme.logo_path)
        if logo_path.is_file():
            try:
                image_reader = ImageReader(str(logo_path))
                width, height = image_reader.getSize()
                if width and height:
                    max_width = float(data.get("logo_max_width", 2.5 * inch))
                    target_width = min(max_width, width) if width > 0 else max_width
                    aspect_ratio = height / float(width) if width else 1.0
                    target_height = target_width * aspect_ratio
                else:
                    target_width = 2.5 * inch
                    target_height = 1.0 * inch

                logo = Image(str(logo_path), width=target_width, height=target_height)
                logo.hAlign = "CENTER"
                story.append(logo)
                story.append(Spacer(1, 0.25 * inch))
            except Exception as exc:  # pragma: no cover - visual asset
                logger.warning(
                    "Failed to render report logo",
                    logo_path=str(logo_path),
                    error=str(exc),
                )
        else:
            logger.warning("Report logo path not found", logo_path=str(logo_path))

    # Report generation disclaimer
    disclaimer = create_disclaimer(theme)
    story.append(disclaimer)

    return story


def build_metadata_table(theme: Theme, data: Dict[str, Any]) -> Table:
    """
    Build metadata table for title page.

    Args:
        theme: Theme configuration
        data: Audit data dictionary

    Returns:
        Formatted metadata table
    """
    table_styles = create_table_styles(theme)

    # Extract data with fallbacks
    date_range = data.get("date_range", {})
    start_date = date_range.get("start")
    end_date = date_range.get("end")

    # Build metadata rows
    metadata_rows = [
        ["Report Date:", format_date(end_date, theme) if end_date else "N/A"],
        [
            "Audit Period:",
            f"{format_date(start_date, theme)} – {format_date(end_date, theme)}"
            if start_date and end_date
            else "N/A",
        ],
        ["Total Queries:", str(data.get("total_responses", 0))],
        [
            "Platforms Analyzed:",
            ", ".join(data.get("platform_stats", {}).keys()) or "None",
        ],
        ["Industry:", data.get("industry", "Not specified")],
        ["Competitors:", ", ".join(data.get("competitors", [])) or "None analyzed"],
    ]

    # Add client-specific information if available
    if "product_type" in data:
        metadata_rows.insert(-1, ["Product Type:", data["product_type"]])

    # Create table
    metadata_table = Table(
        metadata_rows, colWidths=[2.5 * inch, 4 * inch], hAlign="LEFT"
    )

    # Apply minimal styling
    metadata_table.setStyle(table_styles["minimal"])

    return metadata_table


def create_disclaimer(theme: Theme) -> Paragraph:
    """
    Create report disclaimer and confidentiality notice.

    Args:
        theme: Theme configuration

    Returns:
        Formatted disclaimer paragraph
    """
    styles = create_paragraph_styles(theme)

    disclaimer_text = """
    <b>Confidential Report</b><br/>
    This report contains confidential and proprietary information generated by the AEO Audit Platform.
    The analysis is based on AI platform responses collected during the specified audit period.
    Results may vary based on platform algorithm changes and query variations.
    <br/><br/>
    <i>Generated by AEO Audit Platform - All rights reserved</i>
    """

    return Paragraph(disclaimer_text, styles["footer"])


def create_executive_summary_preview(theme: Theme, data: Dict[str, Any]) -> List[Any]:
    """
    Create a brief executive summary preview for the title page.

    Args:
        theme: Theme configuration
        data: Audit data dictionary

    Returns:
        List of flowables for executive preview
    """
    story = []
    styles = create_paragraph_styles(theme)

    # Only include if we have meaningful data
    brand_performance = data.get("brand_performance", {})
    client_name = data.get("client_name", "")

    if brand_performance and client_name:
        client_data = brand_performance.get(client_name, {})
        total_mentions = client_data.get("total_mentions", 0)

        if total_mentions > 0:
            # Quick preview
            preview_text = f"""
            <b>Key Findings Preview:</b><br/>
            • {client_name} received {total_mentions} brand mentions across all platforms<br/>
            • Analysis covers {len(data.get('platform_stats', {}))} AI platforms<br/>
            • Competitive analysis includes {len(data.get('competitors', []))} competitors
            """

            story.append(Spacer(1, 0.2 * inch))
            story.append(Paragraph(preview_text, styles["body"]))

    return story
