name: Deploy Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (default: prod-<sha>)"
        required: false
      strategy:
        description: "Deployment strategy"
        required: false
        default: blue-green
        type: choice
        options:
          - blue-green
          - rolling

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=prod
            type=raw,value=prod-${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout (for scripts)
        uses: actions/checkout@v4

      - name: Deploy via SSH (blue/green)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_PROD }}
          username: ${{ secrets.SSH_USER_PROD }}
          key: ${{ secrets.SSH_KEY_PROD }}
          script_stop: true
          script: |
            export IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag || format('prod-{0}', github.sha) }}
            export STRATEGY=${{ github.event.inputs.strategy || 'blue-green' }}
            export APP_ENV=production
            bash -s << 'EOF'
            set -euo pipefail
            mkdir -p ~/aeo && cd ~/aeo
            docker pull $IMAGE
            # Run DB migrations prior to deploy
            ./deployment/scripts/migrate.sh $IMAGE || true
            IMAGE_TAG=$IMAGE ./deployment/scripts/deploy.sh production $STRATEGY
            EOF
