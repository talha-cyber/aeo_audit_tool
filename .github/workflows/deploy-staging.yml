name: Deploy Staging

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=staging
            type=raw,value=staging-${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ success() }}
    steps:
      - name: Checkout (for scripts)
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER_STAGING }}
          key: ${{ secrets.SSH_KEY_STAGING }}
          script_stop: true
          script: |
            export IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
            export APP_ENV=staging
            bash -s << 'EOF'
            set -euo pipefail
            mkdir -p ~/aeo && cd ~/aeo
            # Fetch latest compose and scripts (assumes repo mirrored or baked into server)
            # Pull image and deploy
            docker pull $IMAGE
            # Run DB migrations prior to deploy
            ./deployment/scripts/migrate.sh $IMAGE || true
            IMAGE_TAG=$IMAGE ./deployment/scripts/deploy.sh staging
            EOF
