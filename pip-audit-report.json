{"dependencies": [{"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.15", "vulns": []}, {"name": "aioredis", "version": "2.0.1", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "alembic", "version": "1.12.1", "vulns": []}, {"name": "amqp", "version": "5.3.1", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anthropic", "version": "0.7.7", "vulns": []}, {"name": "anyio", "version": "3.7.1", "vulns": []}, {"name": "async-timeout", "version": "5.0.1", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "bandit", "version": "1.7.5", "vulns": []}, {"name": "billiard", "version": "4.2.1", "vulns": []}, {"name": "black", "version": "25.1.0", "vulns": []}, {"name": "blis", "version": "0.7.11", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.3.0", "vulns": []}, {"name": "catalogue", "version": "2.0.10", "vulns": []}, {"name": "celery", "version": "5.3.4", "vulns": []}, {"name": "certifi", "version": "2025.7.14", "vulns": []}, {"name": "cffi", "version": "2.0.0", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "click", "version": "8.2.1", "vulns": []}, {"name": "click-didyoumean", "version": "0.3.1", "vulns": []}, {"name": "click-plugins", "version": "1.1.1.2", "vulns": []}, {"name": "click-repl", "version": "0.3.0", "vulns": []}, {"name": "cloudpathlib", "version": "0.16.0", "vulns": []}, {"name": "confection", "version": "0.1.5", "vulns": []}, {"name": "contourpy", "version": "1.3.3", "vulns": []}, {"name": "coverage", "version": "7.10.1", "vulns": []}, {"name": "cryptography", "version": "45.0.7", "vulns": []}, {"name": "cycler", "version": "0.12.1", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "cymem", "version": "2.0.11", "vulns": []}, {"name": "de-core-news-sm", "skip_reason": "Dependency not found on PyPI and could not be audited: de-core-news-sm (3.7.0)"}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "distlib", "version": "0.4.0", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "en-core-web-sm", "skip_reason": "Dependency not found on PyPI and could not be audited: en-core-web-sm (3.7.1)"}, {"name": "fastapi", "version": "0.116.1", "vulns": []}, {"name": "filelock", "version": "3.18.0", "vulns": []}, {"name": "fonttools", "version": "4.59.0", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "fsspec", "version": "2025.7.0", "vulns": []}, {"name": "gevent", "version": "25.5.1", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "gitpython", "version": "3.1.45", "vulns": []}, {"name": "greenlet", "version": "3.2.3", "vulns": []}, {"name": "gunicorn", "version": "23.0.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "hf-xet", "version": "1.1.5", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "huggingface-hub", "version": "0.34.2", "vulns": []}, {"name": "identify", "version": "2.6.12", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "jinja2", "version": "3.1.2", "vulns": [{"id": "GHSA-h5c8-rqwp-cp95", "fix_versions": ["3.1.3"], "aliases": ["CVE-2024-22195"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix."}, {"id": "GHSA-h75v-3vvj-5mfj", "fix_versions": ["3.1.4"], "aliases": ["CVE-2024-34064"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.  Accepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe."}, {"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56326"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56201"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "jiter", "version": "0.10.0", "vulns": []}, {"name": "joblib", "version": "1.5.1", "vulns": []}, {"name": "kiwisolver", "version": "1.4.8", "vulns": []}, {"name": "kombu", "version": "5.5.4", "vulns": []}, {"name": "langcodes", "version": "3.5.0", "vulns": []}, {"name": "language-data", "version": "1.3.0", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "mako", "version": "1.3.10", "vulns": []}, {"name": "marisa-trie", "version": "1.2.1", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "matplotlib", "version": "3.8.2", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "multidict", "version": "6.6.4", "vulns": []}, {"name": "murmurhash", "version": "1.0.13", "vulns": []}, {"name": "mypy", "version": "1.7.0", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "nltk", "version": "3.8.1", "vulns": [{"id": "PYSEC-2024-167", "fix_versions": ["3.9"], "aliases": ["CVE-2024-39705"], "description": "NLTK through 3.8.1 allows remote code execution if untrusted packages have pickled Python code, and the integrated data package download functionality is used. This affects, for example, averaged_perceptron_tagger and punkt."}]}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "numpy", "version": "1.26.4", "vulns": []}, {"name": "openai", "version": "1.98.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pandas", "version": "2.1.3", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pillow", "version": "11.3.0", "vulns": []}, {"name": "pip", "version": "25.1.1", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "pre-commit", "version": "4.2.0", "vulns": []}, {"name": "preshed", "version": "3.0.10", "vulns": []}, {"name": "prometheus-client", "version": "0.22.1", "vulns": []}, {"name": "prometheus-fastapi-instrumentator", "version": "6.1.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "psutil", "version": "7.0.0", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.9", "vulns": []}, {"name": "py-cpuinfo", "version": "9.0.0", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pycparser", "version": "2.23", "vulns": []}, {"name": "pydantic", "version": "2.5.0", "vulns": []}, {"name": "pydantic-core", "version": "2.14.1", "vulns": []}, {"name": "pydantic-settings", "version": "2.1.0", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "pytest", "version": "7.4.3", "vulns": []}, {"name": "pytest-asyncio", "version": "0.21.1", "vulns": []}, {"name": "pytest-benchmark", "version": "4.0.0", "vulns": []}, {"name": "pytest-cov", "version": "4.1.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.0.0", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "rapidfuzz", "version": "3.5.2", "vulns": []}, {"name": "redis", "version": "5.0.1", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "reportlab", "version": "4.0.7", "vulns": []}, {"name": "requests", "version": "2.31.0", "vulns": [{"id": "GHSA-9wx4-h78v-vm56", "fix_versions": ["2.32.0"], "aliases": ["CVE-2024-35195"], "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.  ### Remediation Any of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.  * Upgrade to `requests>=2.32.0`. * For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session. * For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.  ### Related Links * https://github.com/psf/requests/pull/6655"}, {"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "aliases": ["CVE-2024-47081"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "rich", "version": "14.1.0", "vulns": []}, {"name": "ruff", "version": "0.1.6", "vulns": []}, {"name": "safetensors", "version": "0.5.3", "vulns": []}, {"name": "scikit-learn", "version": "1.7.1", "vulns": []}, {"name": "scipy", "version": "1.16.1", "vulns": []}, {"name": "sentence-transformers", "version": "2.2.2", "vulns": []}, {"name": "sentencepiece", "version": "0.2.0", "vulns": []}, {"name": "sentry-sdk", "version": "1.38.0", "vulns": [{"id": "GHSA-g92j-qhmh-64v2", "fix_versions": ["1.45.1", "2.8.0"], "aliases": ["CVE-2024-40647"], "description": "### Impact  The bug in Sentry's Python SDK <2.8.0 results in the unintentional exposure of environment variables to subprocesses despite the `env={}` setting.  ### Details  In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls, like in this example:  ``` >>> subprocess.check_output([\"env\"], env={\"TEST\":\"1\"}) b'TEST=1\\n' ```  If you'd want to not pass any variables, you can set an empty dict:  ``` >>> subprocess.check_output([\"env\"], env={}) b'' ```  However, the bug in Sentry SDK <2.8.0 causes **all environment variables** to be passed to the subprocesses when `env={}` is set, unless the Sentry SDK's [Stdlib](https://docs.sentry.io/platforms/python/integrations/default-integrations/#stdlib) integration is disabled. The Stdlib integration is enabled by default.  ### Patches The issue has been patched in https://github.com/getsentry/sentry-python/pull/3251 and the fix released in [sentry-sdk==2.8.0](https://github.com/getsentry/sentry-python/releases/tag/2.8.0). The fix was also backported to [sentry-sdk==1.45.1](https://github.com/getsentry/sentry-python/releases/tag/1.45.1).  ### Workarounds  We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, there are two options:  1. In your application, replace `env={}` with the minimal dict `env={\"EMPTY_ENV\":\"1\"}` or similar.  OR  2. Disable Stdlib integration: ``` import sentry_sdk  # Should go before sentry_sdk.init sentry_sdk.integrations._DEFAULT_INTEGRATIONS.remove(\"sentry_sdk.integrations.stdlib.StdlibIntegration\")  sentry_sdk.init(...) ```  ### References * Sentry docs: [Default integrations](https://docs.sentry.io/platforms/python/integrations/default-integrations/) * Python docs: [subprocess module](https://docs.python.org/3/library/subprocess.html) * Patch https://github.com/getsentry/sentry-python/pull/3251"}]}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "smart-open", "version": "6.4.0", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "spacy", "version": "3.7.2", "vulns": []}, {"name": "spacy-legacy", "version": "3.0.12", "vulns": []}, {"name": "spacy-loggers", "version": "1.0.5", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.23", "vulns": []}, {"name": "srsly", "version": "2.5.1", "vulns": []}, {"name": "starlette", "version": "0.47.2", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "structlog", "version": "23.2.0", "vulns": []}, {"name": "sympy", "version": "1.13.1", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "thinc", "version": "8.2.5", "vulns": []}, {"name": "threadpoolctl", "version": "3.6.0", "vulns": []}, {"name": "tokenizers", "version": "0.15.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "torch", "version": "2.5.0", "vulns": [{"id": "PYSEC-2025-41", "fix_versions": ["2.6.0"], "aliases": ["GHSA-53q9-r3pm-6pq6", "CVE-2025-32434"], "description": "PyTorch is a Python package that provides tensor computation with strong GPU acceleration and deep neural networks built on a tape-based autograd system. In version 2.5.1 and prior, a Remote Command Execution (RCE) vulnerability exists in PyTorch when loading a model using torch.load with weights_only=True. This issue has been patched in version 2.6.0."}, {"id": "GHSA-3749-ghw9-m3mg", "fix_versions": ["2.7.1rc1"], "aliases": ["CVE-2025-2953"], "description": "A vulnerability, which was classified as problematic, has been found in PyTorch 2.6.0+cu124. Affected by this issue is the function torch.mkldnn_max_pool2d. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used."}, {"id": "GHSA-887c-mr87-cxwp", "fix_versions": ["2.8.0"], "aliases": ["CVE-2025-3730"], "description": "A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue."}]}, {"name": "torchvision", "version": "0.20.0", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "transformers", "version": "4.35.2", "vulns": [{"id": "PYSEC-2023-301", "fix_versions": ["4.36.0"], "aliases": ["CVE-2023-7018"], "description": "Deserialization of Untrusted Data in GitHub repository huggingface/transformers prior to 4.36."}, {"id": "PYSEC-2023-300", "fix_versions": ["4.36.0"], "aliases": ["CVE-2023-6730"], "description": "Deserialization of Untrusted Data in GitHub repository huggingface/transformers prior to 4.36."}, {"id": "PYSEC-2024-227", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11392"], "description": "Hugging Face Transformers MobileViTV2 Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of configuration files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-24322."}, {"id": "PYSEC-2024-228", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11393"], "description": "Hugging Face Transformers MaskFormer Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the parsing of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25191."}, {"id": "PYSEC-2024-229", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11394"], "description": "Hugging Face Transformers Trax Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25012."}, {"id": "PYSEC-2025-40", "fix_versions": ["4.49.0"], "aliases": ["CVE-2025-2099"], "description": "A vulnerability in the `preprocess_string()` function of the `transformers.testing_utils` module in huggingface/transformers version v4.48.3 allows for a Regular Expression Denial of Service (ReDoS) attack. The regular expression used to process code blocks in docstrings contains nested quantifiers, leading to exponential backtracking when processing input with a large number of newline characters. An attacker can exploit this by providing a specially crafted payload, causing high CPU usage and potential application downtime, effectively resulting in a Denial of Service (DoS) scenario."}, {"id": "GHSA-37q5-v5qm-c9v8", "fix_versions": ["4.38.0"], "aliases": ["CVE-2024-3568"], "description": "The huggingface/transformers library is vulnerable to arbitrary code execution through deserialization of untrusted data within the `load_repo_checkpoint()` function of the `TFPreTrainedModel()` class. Attackers can execute arbitrary code and commands by crafting a malicious serialized payload, exploiting the use of `pickle.load()` on data from potentially untrusted sources. This vulnerability allows for remote code execution (RCE) by deceiving victims into loading a seemingly harmless checkpoint during a normal training process, thereby enabling attackers to execute arbitrary code on the targeted machine."}, {"id": "GHSA-6rvg-6v2m-4j46", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-12720"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library, specifically in the file tokenization_nougat_fast.py. The vulnerability occurs in the post_process_single() function, where a regular expression processes specially crafted input. The issue stems from the regex exhibiting exponential time complexity under certain conditions, leading to excessive backtracking. This can result in significantly high CPU usage and potential application downtime, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.46.3."}, {"id": "GHSA-fpwr-67px-3qhx", "fix_versions": ["4.50.0"], "aliases": ["CVE-2025-1194"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library, specifically in the file `tokenization_gpt_neox_japanese.py` of the GPT-NeoX-Japanese model. The vulnerability occurs in the SubWordJapaneseTokenizer class, where regular expressions process specially crafted inputs. The issue stems from a regex exhibiting exponential complexity under certain conditions, leading to excessive backtracking. This can result in high CPU usage and potential application downtime, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.48.1 (latest)."}, {"id": "GHSA-q2wp-rjmx-x6x9", "fix_versions": ["4.51.0"], "aliases": ["CVE-2025-3263"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_configuration_file()` function within the `transformers.configuration_utils` module. The affected version is 4.49.0, and the issue is resolved in version 4.51.0. The vulnerability arises from the use of a regular expression pattern `config\\.(.*)\\.json` that can be exploited to cause excessive CPU consumption through crafted input strings, leading to catastrophic backtracking. This can result in model serving disruption, resource exhaustion, and increased latency in applications using the library."}, {"id": "GHSA-jjph-296x-mrcr", "fix_versions": ["4.51.0"], "aliases": ["CVE-2025-3264"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_imports()` function within `dynamic_module_utils.py`. This vulnerability affects versions 4.49.0 and is fixed in version 4.51.0. The issue arises from a regular expression pattern `\\s*try\\s*:.*?except.*?:` used to filter out try/except blocks from Python code, which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to remote code loading disruption, resource exhaustion in model serving, supply chain attack vectors, and development pipeline disruption."}, {"id": "GHSA-phhr-52qp-3mj4", "fix_versions": ["4.52.1"], "aliases": ["CVE-2025-3777"], "description": "Hugging Face Transformers versions up to 4.49.0 are affected by an improper input validation vulnerability in the `image_utils.py` file. The vulnerability arises from insecure URL validation using the `startswith()` method, which can be bypassed through URL username injection. This allows attackers to craft URLs that appear to be from YouTube but resolve to malicious domains, potentially leading to phishing attacks, malware distribution, or data exfiltration. The issue is fixed in version 4.52.1."}, {"id": "GHSA-37mw-44qp-f5jm", "fix_versions": ["4.52.1"], "aliases": ["CVE-2025-3933"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically within the DonutProcessor class's `token2json()` method. This vulnerability affects versions 4.51.3 and earlier, and is fixed in version 4.52.1. The issue arises from the regex pattern `<s_(.*?)>` which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to service disruption, resource exhaustion, and potential API service vulnerabilities, impacting document processing tasks using the Donut model."}, {"id": "GHSA-9356-575x-2w9m", "fix_versions": ["4.53.0"], "aliases": ["CVE-2025-5197"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability exists in the Hugging Face Transformers library, specifically in the `convert_tf_weight_name_to_pt_weight_name()` function. This function, responsible for converting TensorFlow weight names to PyTorch format, uses a regex pattern `/[^/]*___([^/]*)/` that can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. The vulnerability affects versions up to 4.51.3 and is fixed in version 4.53.0. This issue can lead to service disruption, resource exhaustion, and potential API service vulnerabilities, impacting model conversion processes between TensorFlow and PyTorch formats."}, {"id": "GHSA-59p9-h35m-wg4g", "fix_versions": ["4.53.0"], "aliases": ["CVE-2025-6638"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically affecting the MarianTokenizer's `remove_language_code()` method. This vulnerability is present in version 4.52.4 and has been fixed in version 4.53.0. The issue arises from inefficient regex processing, which can be exploited by crafted input strings containing malformed language code patterns, leading to excessive CPU consumption and potential denial of service."}]}, {"name": "typer", "version": "0.9.4", "vulns": []}, {"name": "typing-extensions", "version": "4.14.1", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "uvicorn", "version": "0.24.0", "vulns": []}, {"name": "vadersentiment", "version": "3.3.2", "vulns": []}, {"name": "vine", "version": "5.1.0", "vulns": []}, {"name": "virtualenv", "version": "20.32.0", "vulns": []}, {"name": "wasabi", "version": "1.1.3", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "weasel", "version": "0.3.4", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "zope-event", "version": "5.1.1", "vulns": []}, {"name": "zope-interface", "version": "7.2", "vulns": []}], "fixes": []}
