"""Add industry product_type and competitors to client

Revision ID: ac553b04ff00
Revises: 15240ce51cbb
Create Date: 2025-08-26 14:21:52.731786

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "ac553b04ff00"
down_revision: Union[str, None] = "15240ce51cbb"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - adjusted for FK/type changes ###
    # 1) Drop FK that references client.id so we can change types safely
    op.drop_constraint("auditrun_client_id_fkey", "auditrun", type_="foreignkey")

    # 2) Ensure client.id has no server default (sequence) before type change
    op.alter_column("client", "id", server_default=None, existing_type=sa.INTEGER())
    # Optionally drop sequence if it exists (name inferred from previous default)
    op.execute("DROP SEQUENCE IF EXISTS client_id_seq")

    # 3) Change client.id to VARCHAR using explicit cast
    op.alter_column(
        "client",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False,
        postgresql_using="id::varchar",
    )

    # 4) Change auditrun.client_id to VARCHAR using explicit cast
    op.alter_column(
        "auditrun",
        "client_id",
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=True,
        postgresql_using="client_id::varchar",
    )

    # 5) Recreate FK with new types
    op.create_foreign_key(
        "auditrun_client_id_fkey",
        source_table="auditrun",
        referent_table="client",
        local_cols=["client_id"],
        remote_cols=["id"],
        ondelete=None,
    )

    # 6) Other autogenerated changes
    op.alter_column(
        "auditrun",
        "config",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=False,
    )
    op.drop_index("idx_audit_runs_client_started", table_name="auditrun")
    op.drop_index("idx_audit_runs_status", table_name="auditrun")

    op.add_column("client", sa.Column("industry", sa.String(), nullable=True))
    op.add_column("client", sa.Column("product_type", sa.String(), nullable=True))
    op.add_column("client", sa.Column("competitors", sa.JSON(), nullable=True))

    # The original autogen attempted to drop this index after changing type; keep it dropped
    op.drop_index("ix_client_id", table_name="client")

    op.alter_column(
        "questions", "audit_run_id", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column("questions", "category", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_index("idx_questions_audit_run", table_name="questions")

    op.alter_column(
        "responses", "audit_run_id", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column("responses", "platform", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "responses", "response_text", existing_type=sa.TEXT(), nullable=False
    )
    op.alter_column(
        "responses",
        "raw_response",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=False,
    )
    op.drop_index("idx_responses_audit_run", table_name="responses")
    op.drop_index("idx_responses_platform_time", table_name="responses")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        "idx_responses_platform_time",
        "responses",
        ["platform", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_responses_audit_run", "responses", ["audit_run_id"], unique=False
    )
    op.alter_column(
        "responses",
        "raw_response",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "responses", "response_text", existing_type=sa.TEXT(), nullable=True
    )
    op.alter_column("responses", "platform", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "responses", "audit_run_id", existing_type=sa.VARCHAR(), nullable=True
    )
    op.create_index(
        "idx_questions_audit_run", "questions", ["audit_run_id"], unique=False
    )
    op.alter_column("questions", "category", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "questions", "audit_run_id", existing_type=sa.VARCHAR(), nullable=True
    )
    op.create_index("ix_client_id", "client", ["id"], unique=False)
    # Restore integer types (reverse of upgrade)
    op.drop_constraint("auditrun_client_id_fkey", "auditrun", type_="foreignkey")
    op.alter_column(
        "auditrun",
        "client_id",
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=True,
        postgresql_using="client_id::integer",
    )
    op.alter_column(
        "client",
        "id",
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        postgresql_using="id::integer",
    )
    op.execute("CREATE SEQUENCE IF NOT EXISTS client_id_seq OWNED BY client.id")
    op.alter_column(
        "client", "id", server_default=sa.text("nextval('client_id_seq'::regclass)")
    )
    op.drop_column("client", "competitors")
    op.drop_column("client", "product_type")
    op.drop_column("client", "industry")
    op.create_index("idx_audit_runs_status", "auditrun", ["status"], unique=False)
    op.create_index(
        "idx_audit_runs_client_started",
        "auditrun",
        ["client_id", "started_at"],
        unique=False,
    )
    op.alter_column(
        "auditrun",
        "config",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.create_foreign_key(
        "auditrun_client_id_fkey", "auditrun", "client", ["client_id"], ["id"]
    )
    # ### end Alembic commands ###
